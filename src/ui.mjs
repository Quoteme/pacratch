import * as TRAINER from './trainer.mjs';

let menu = document.getElementById("menu");
let newGame = document.getElementById("newGame");

/**
 * Initialize the menu
 */
export function init(){
	initNewGame();
}

/**
 * Initialize the new game screen
 */
async function initNewGame(){
	let playerNR = document.getElementById("playerNR");
	document.getElementById("chooseDeck").onclick = _ =>
		createPlayers(parseInt(playerNR.value))

	/**
	 * Create all the players needed
	 * @param {number} n - the number of players
	 * @returns {Trainer[]} a list of trainers with their decks selected
	 */
	async function createPlayers(n){
		let players = [];
		for(let i=1; i<=n; i++){
			try{
				players.push(
					await PlayerCreationScreen
						.createPlayer(`Player ${i}`)
				);
			}catch(err){
			}
		}
		console.log(players)
		return players;
	}
}

class PlayerCreationScreen{
	/**
	 * Create a new player creation screen
	 * @param {String} [name] - name that is prefilled in this creation
	 * screen for the player
	 * @param {String} [deck] - deck that is prefilled in this creation
	 * screen for the player
	 * @param {String} [hand] - cards that the player will have on
	 * his hands from the start
	 * @param {String} [active] - cards that will be active for this
	 * player from the start
	 * @param {callback} [resolve] - what to do, when creation screen
	 * is closing successfully
	 * @param {callback} [reject] - what to do, when creation screen
	 * is closing with an error
	 */
	constructor(name, deck, hand, active, resolve, reject){
		this.name    = name    ?? "Unnamed Player";
		this.deck    = deck    ?? [];
		this.hand    = hand    ?? [];
		this.active  = active  ?? [];
		this.resolve = resolve ?? (_ => {});
		this.reject  = reject  ?? (_ => {});
	}

	/**
	 * Return the HTML which is needed to be filled in with the
	 * information regarding the player that is about to be created
	 */
	get html(){
		// creating all the nodes
		let container = document.createElement("div");
			container.classList.add("playerCreationScreen")
		let cancel = document.createElement("button");
			cancel.innerText = "X"
			cancel.classList.add("cancel");
			cancel.onclick = _ => {
				this.reject("Closed by user request")
				document.body.removeChild(container);
			}
		let title = document.createElement("h3");
			title.innerText = `Create Player: ${this.name}`;
		let table = document.createElement("table");
		let name = document.createElement("tr");
		let nameInfo = document.createElement("td");
			nameInfo.innerText = "Name";
		let nameValue = document.createElement("td");
		let nameInput = document.createElement("input");
			nameInput.type = "text";
			nameInput.value = this.name;
			nameInput.onchange = _ => this.name = nameInput.value
		let finished = document.createElement("button");
			finished.innerText = "next";
			finished.onclick = _ => {
				this.resolve(this.trainer)
				document.body.removeChild(container);
			};

		// Stiching all the nodes together
		container.appendChild(cancel);
		container.appendChild(title);
		container.appendChild(table);
			table.appendChild(name);
				name.appendChild(nameInput);
				name.appendChild(nameValue);
					nameValue.appendChild(nameInput);
		container.appendChild(finished);
		//
		return container;
	}

	/**
	 * Return the trainer-object that is generated by this creation
	 * screen
	 */
	get trainer(){
		return new TRAINER.Trainer(
			this.name,
			this.deck,
			this.hand,
			this.active,
		)
	}

	/**
	 * Full automatically create a screen asking for Information
	 * about the player that is to be created. Then create this player
	 * as an actual trainer-object
	 */
	static createPlayer(name, deck, hand, active){
		return new Promise((resolve, reject) => {
			document.body.appendChild(
				new PlayerCreationScreen(
					name,
					deck,
					hand,
					active,
					resolve,
					reject
				).html
			);
		})
	}
}

class DeckCreationScreen{
	/**
	 * Creates an interactive menu to select cards for a deck
	 *
	 * @param {Pacratch[]} cards - A list of cards to choose from
	 * @param {Pacratch[]} [deck] - Cards that are pre-chosen to be in
	 * the deck
	 * @param {number} [n] - number of cards that are allowed in the deck
	 */
	constructor(cards,deck,n){
		this.cards   = cards ?? [];
		this.deck    = deck  ?? [];
		this.maxSize = n     ?? 60;
	}

	static createDeck(...cards){
		return new Promise((resolve, reject) => {
			// TODO
		})
	}
}
